RapidRider CS 262 Project
    http://code.google.com/p/rapidrider/


Setup Eclipse with a RapidRider project:

  A simple 12 step process to get you up and running in an amount of time that
  could be measured in seconds or any other time unit:
  
  NOTE: Most of these steps are not specific to RapidRider and could be used to 
  setup a development environment for any of the CS 262 projects.

  0. Skip to step 6 if you are working on a computer in the u-lab.
  
  1. Install Eclipse.  Europa (3.2) should work.  I haven't gotten 
     Ganymede (3.4) to work for this project.  Europa can be downloaded from 
     Calvin's mirror at:
     
  http://mirror.calvin.edu/eclipse/downloads/drops/R-3.2-200606291905/index.php

  2. Install WTK.  In the lab we are using 2.5 Beta, but it was only released
     for Windows, and WTK 2.5.2 works fine.  It can be found at:
     
  http://java.sun.com/products/sjwtoolkit/download.html

     Scroll to the bottom of the page, select Download, and follow the
     instructions.
     
  3. Install Subclipse.  In Eclipse, install Subclipse and either 
     SVNKit Adapter or JavaHL Adapter from the update site at:
     
  http://subclipse.tigris.org/update_1.4.x
  
     I chose SVNKit.  It works OK.  Subclipse gets a bit confused sometimes
     though.
  
  4. Download Tidalwave.  The Tidalwave jar from lab 2 works fine.  It can be
     found at:
     
  http://cs.calvin.edu/curriculum/cs/262/kvlinden/resources/tidalwave0.4.jar

     You will need the CS 262 password.  Put this jar somewhere safe where you
     can link to it from inside Eclipse.
  
  5. Install EclipseME.  I have not been able to get the newest version of 
     EclipseME (1.7.9) to work with Tidalwave.  (I don't really know what the 
     problem is though.)  EclipseME 1.5.5 is installed in the lab.  It can be
     found at:
  
  http://sourceforge.net/project/showfiles.php?group_id=86829&package_id=90314

     Extract this zip file, and then tell Eclipse to use the extracted 
     directory as a local update site.
  
  6. Check out the RapidRider source code with Subclipse.  The location of the 
     Google Code repository is:
     
  https://rapidrider.googlecode.com/svn/trunk/
  
     You will need your Google Code password which can be found in your profile.
    
     Eclipse will probably show some errors, but the next two steps should take
     care of them.
  
  7. Tell Eclipse where Tidalwave is.  Open up the Properties for the project.
     Go to Java Build Path.  Go to the Libraries tab.  Click Add Variable.  And
     add a variable TIDALWAVE that points to your Tidalwave jar file.
     
  8. Tell Eclipse where KXML is.  Open up the Properties for the project.
     Go to Java Build Path.  Go to the Libraries tab.  Click Add Variable.  Add
     a variable KXML_PARSER that points to your KXML jar file.  That jar can
     be downloaded from:
     
  http://cs.calvin.edu/curriculum/cs/262/kvlinden/resources/kxml2-2.3.0.jar
  
  9. Tell Eclipse about J2ME.  Open the Properties for the project.  Select the
     J2ME tab.  If you are in the u-lab, you will probably be able to set the
     Group to the single option and be good to go.  Otherwise, click Manage 
     Devices, select the root of the WTK directory, and refresh the device 
     list.  Choose the device you would like the emulator to use.
     
  10. Tell Eclipse to compile backwards compatable code.  Open the Properties 
     for the project.  Select Java Compiler.  Enable project specific settings.
     Select Java 1.3 for the compiler compliance level.
  
  11. Right click the main Midlet class and run it as an Emulated J2ME Midlet.
  
  12. If you get stuck or have any questions feel free to contact Greg Clark.


The RapidRider work cycle:
  
  TODO: Would it be good to go over the basics of using subversion and working
        as a team?


Deploy RapidRider to a real device:
  
  TODO: Include instructions for this?
  

Install StarUML in Linux:

  With some effort, this is possible.
  
  TODO: Should I write instructions here?
  
